


import static org.mockito.Mockito.*; import static org.junit.Assert.*; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.MockitoAnnotations; import org.mockito.MockedStatic; import org.powermock.api.mockito.PowerMockito; import org.powermock.core.classloader.annotations.PowerMockIgnore; import org.powermock.core.classloader.annotations.PrepareForTest; import org.powermock.modules.junit4.PowerMockRunner; import org.springframework.http.HttpHeaders; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import java.util.Hashtable; @RunWith(PowerMockRunner.class) @PrepareForTest({ DBBencalcRestController.class, BencalcBenefitCalculatorUtil.class, BeanProvider.class }) @PowerMockIgnore({ "javax.management.*", "com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "org.w3c.*" }) public class DBBencalcRestControllerTest { @Mock private BenefitCalculatorInterfaceBean mockBenCalcI; @Mock private PostCalculationProcessing pcp; @Mock private CalculationResultJB mockCalculationResultJB; @InjectMocks private DBBencalcRestController dbBencalcRestController; private CalcRequestModel calcRequestModel; private HttpHeaders httpHeaders; @Before public void setup() { MockitoAnnotations.initMocks(this); calcRequestModel = new CalcRequestModel(); httpHeaders = new HttpHeaders(); } @Test public void testRunBenefitCalculationPositiveCase() throws Exception { setupRequestParameters(); httpHeaders.add("authorization", "auth"); httpHeaders.add("fid-principal-role", "client"); httpHeaders.add("fid-user-id", "a723777"); httpHeaders.add("fid-log-tracking-id", "REQ5f775a017f00000120000e860000aa34"); httpHeaders.add("accept", "application/json"); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); DBBencalcRestController spyDBBencalcRestController = PowerMockito.spy(new DBBencalcRestController()); PowerMockito.doNothing().when(spyDBBencalcRestController, "doPostCalcProcessing", Mockito.any(), Mockito.any()); ResponseEntity<Object> result = spyDBBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(200, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationPositiveCaseReq() throws Exception { setupRequiredRequestParameters(); httpHeaders.add("authorization", "auth"); httpHeaders.add("fid-principal-role", "client"); httpHeaders.add("fid-user-id", "a723777"); httpHeaders.add("fid-log-tracking-id", "REQ5f775a017f00000120000e860000aa34"); httpHeaders.add("accept", "application/json"); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(200, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationNegativeCaseNoReqType() throws Exception { calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "57066", "CLIENT", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); setupCommonHttpHeaders(); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(400, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationNegativeCaseNoReqID() throws Exception { calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "57066", "CLIENT", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); setupCommonHttpHeaders(); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(400, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationNegativeCaseNoClient() throws Exception { calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); setupCommonHttpHeaders(); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(400, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationNegativeCaseNoIDENTITY() throws Exception { calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "57066", "CLIENT", 3)); setupCommonHttpHeaders(); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(400, result.getStatusCodeValue()); } } @Test public void testRunBenefitCalculationNegativeCaseErr() throws Exception { calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "abcde", "CLIENT", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); setupCommonHttpHeaders(); try (MockedStatic<BencalcBenefitCalculatorUtil> mockedUtil = Mockito.mockStatic(BencalcBenefitCalculatorUtil.class)) { BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any()); mockedUtil.verify(() -> BencalcBenefitCalculatorUtil.setThreadLocalVariables(Mockito.any())); } try (MockedStatic<BeanProvider> mockedObj = Mockito.mockStatic(BeanProvider.class)) { mockedObj.when(() -> BeanProvider.getBean("benefitCalculatorInterfaceBean")).thenReturn(mockBenCalcI); when(mockBenCalcI.processRequest(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(mockCalculationResultJB); ResponseEntity<Object> result = dbBencalcRestController.runBenefitCalculation(calcRequestModel, httpHeaders); assertEquals(500, result.getStatusCodeValue()); } } private void setupRequestParameters() { calcRequestModel.getRequestParameters().put("1", new RequestParameterJB("TERMINATIONDATE", "01/31/2023", "TERMINATIONDATE", 3)); calcRequestModel.getRequestParameters().put("10", new RequestParameterJB("PLANINCONTEXT", "001", "PLANINCONTEXT", 3)); calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("12", new RequestParameterJB("MASTERCLIENT", "57066", "MASTERCLIENT", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "57066", "CLIENT", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); calcRequestModel.getRequestParameters().put("GLOBAL_RATE_ID", new RequestParameterJB("GLOBAL_RATE_ID", "0", "GLOBAL_RATE_ID", 3)); } private void setupRequiredRequestParameters() { calcRequestModel.getRequestParameters().put("1000", new RequestParameterJB("REQUEST_TYPE", "BenefitCalculator", "REQUEST_TYPE", 3)); calcRequestModel.getRequestParameters().put("1001", new RequestParameterJB("REQUESTID", "104", "REQUESTID", 3)); calcRequestModel.getRequestParameters().put("4", new RequestParameterJB("CLIENT", "57066", "CLIENT", 3)); calcRequestModel.getRequestParameters().put("5", new RequestParameterJB("IDENTITY", "570-64-3558", "IDENTITY", 3)); } private void setupCommonHttpHeaders() { httpHeaders.add("authorization", "auth"); httpHeaders.add("fid-principal-role", "client"); httpHeaders.add("fid-user-id", "a723777"); httpHeaders.add("fid-log-tracking-id", "REQ5f775a017f00000120000e860000aa34"); httpHeaders.add("accept", "application/json"); } }
